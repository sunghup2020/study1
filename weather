import { StatusBar } from 'expo-status-bar';
import { View, Text, Dimensions, StyleSheet, ScrollView,  ActivityIndicator, } from "react-native";
import * as Location from "expo-location";
import React, { useEffect, useState } from "react";
import dayjs from 'dayjs';
import { Fontisto } from "@expo/vector-icons";

const { width: SCREEN_WIDTH } = Dimensions.get("window");
//API키 어플에 있으면 안됨
const API_KEY = "66195089460b817232592792055ddd3e";

const icons = {
  Clouds: "cloudy",
  Clear: "day-sunny",
  Atmosphere: "cloudy-gusts",
  Snow: "snow",
  Rain: "rains",
  Drizzle: "rain",
  Thunderstorm: "lightning",
};


const date = dayjs();
var nowdate = date.format("YYYY. MM. DD.")
const nowtemp = 273.15
export default function App() {
  const [city, setCity] = useState("Loading...");
  const [days, setDays] = useState([]);
  const [ok, setOk] = useState(true);
  const getWeather = async () => {
    const { granted } = await Location.requestForegroundPermissionsAsync();
    if (!granted) {
      setOk(false);
    }
    const {
      coords: { latitude, longitude },
    } = await Location.getCurrentPositionAsync({ accuracy: 5 });
    const location = await Location.reverseGeocodeAsync(
      { latitude, longitude },
      { useGoogleMaps: false }
     
    );
    console.log(location);
    //setDistrict(location[0].district);
    setCity(location[0].city);
    const response = await fetch(
      `https://api.openweathermap.org/data/3.0/onecall?lat=${latitude}&lon=${longitude}&exclude=alerts&appid=${API_KEY}&units=metric
    `); 
    const json = await response.json();
    setDays(json.daily);
   // console.log(json);
   // console.log(dayjs().format("YYYY. MM. DD."))
  };
  useEffect(() => {
    getWeather();
  }, []);
  return ( 
    <View style={styles.container}>
       <StatusBar style="light" />
     <View style={styles.city}>
        <Text style={styles.cityName}>{city}</Text>
        <Text style={styles.date}>{nowdate}</Text>
      </View>
      <ScrollView
        pagingEnabled
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.weather}
      >
        {days.length === 0 ? (
          <View style={{ ...styles.day, alignItems: "center" }}>
            <ActivityIndicator
              color="white"
              style={{ marginTop: 10 }}
              size="large"
            />
          </View>
        ) : (
          days.map((day, index) => (
            <View key={index} style={styles.day}>
                <View
                style={{
                  flexDirection: "row",
                  alignItems: "center",
                  width: "100%",
                  justifyContent: "space-between",
                }}
              ></View>
              <Text style={styles.temp}>
                {(parseFloat(day.temp.day).toFixed(1)-nowtemp).toFixed(2)}'C
              </Text>
              <Fontisto
                  name={icons[day.weather[0].main]}
                  size={68}
                  color="white"
                />
              <Text> </Text>
              <Text style={styles.description}>{day.weather[0].main}</Text>
              <Text> </Text>
              <Text style={styles.tinyText}>{day.weather[0].description}</Text>
            </View>
          ))
        )}
      </ScrollView>
    </View>
  ); 
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "tomato",
  },
  city: {
    flex: 1.2,
    justifyContent: "center",
    alignItems: "center",  },
    cityName: { fontSize: 60,
      fontWeight: "500",
      color: "white",
    }, weather: {},
    day: { width: SCREEN_WIDTH,
      alignItems: "center",
      alignItems: "flex-start",
    paddingHorizontal: 20,
    },
    temp: {
      marginTop: 30,
      fontWeight: "400",
      fontSize: 70,
      color: "white",
      textAlign: "left",
    },
    description: {
      marginTop: -10,
      fontSize: 60,
      color: "white",
    },
    tinyText: {
    fontSize: 20,
    marginTop: -5,
    color: "white",
  },
  date:{
    marginTop: 35,
    fontSize: 25,
    color: "white",
  },
  });
  
